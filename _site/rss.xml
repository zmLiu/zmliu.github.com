<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>zmLiu</title>
        <description>zmLiu - zmLiu</description>
        <link>http://zmliu.github.io</link>
        <link>http://zmliu.github.io</link>
        <lastBuildDate>2013-11-26T17:26:38+08:00</lastBuildDate>
        <pubDate>2013-11-26T17:26:38+08:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>The last packet successfully received from the server was XXX seconds ago</title>
                <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;导致这个错误的原因是mysql &lt;code&gt;wait_timeout&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;解决方法:&lt;/em&gt;&lt;/strong&gt; 设置&lt;code&gt;wait_timeout&lt;/code&gt;大于 &lt;code&gt;检测连接是否有效的 线程运行时间&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;比方说&lt;code&gt;wait_timeout=10秒&lt;/code&gt; 那么&lt;code&gt;检测连接是否有效的 线程运行时间&lt;/code&gt;就需要小于10秒&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</description>
                <link>http://zmliu.github.io/2013/11/13/mysql-wait_timeout</link>
                <guid>http://zmliu.github.io/2013/11/13/mysql-wait_timeout</guid>
                <pubDate>2013-11-13T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>MySql 慢查询日志</title>
                <description>&lt;p&gt;打开my.cnf&lt;/p&gt;

&lt;p&gt;找到&lt;code&gt;[mysqld]&lt;/code&gt;在其下面添加&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//查询时间大于两秒的都记录
long_query_time = 2
//日志文件地址(必须保证启动mysql的账户对目录有写权限)
log-slow-queries = /tmp/slow-query.log
//记录没有使用索引的sql语句
log-queries-not-using-indexes
//一些管理指令,也会被记录
log-slow-admin-statements&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以使用&lt;code&gt;mysqldumpslow&lt;/code&gt;(/mysql/bin目录下)来查看日志文件,也可以直接打开日志文件查看&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;-s, 是表示按照何种方式排序，c、t、l、r分别是按照记录次数、时间、查询时间、返回的记录数来排序，ac、at、al、ar，表示相应的倒叙&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;-t, 是top n的意思，即为返回前面多少条的数据；&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;-g, 后边可以写一个正则匹配模式，大小写不敏感的；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;比如&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/path/mysqldumpslow -s r -t 10 /database/mysql/slow-log
得到返回记录集最多的10个查询。

/path/mysqldumpslow -s t -t 10 -g “left join” /database/mysql/slow-log
得到按照时间排序的前10条里面含有左连接的查询语句。&lt;/code&gt;&lt;/pre&gt;</description>
                <link>http://zmliu.github.io/2013/11/11/mysql-slow-query-log</link>
                <guid>http://zmliu.github.io/2013/11/11/mysql-slow-query-log</guid>
                <pubDate>2013-11-11T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>详解MySQL中EXPLAIN解释命令</title>
                <description>&lt;p&gt;explain显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。&lt;/p&gt;

&lt;p&gt;使用方法，在select语句前加上explain就可以了： explain select test_field from tb_test where id=1&lt;/p&gt;

&lt;p&gt;EXPLAIN列的解释：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;table&lt;/code&gt;：显示这一行的数据是关于哪张表的&lt;/p&gt;

&lt;p&gt;&lt;code&gt;type&lt;/code&gt;：这是重要的列，显示连接使用了何种类型。从最好到最差的连接类型为const、eq_reg、ref、range、indexhe和ALL&lt;/p&gt;

&lt;p&gt;&lt;code&gt;possible_keys&lt;/code&gt;：显示可能应用在这张表中的索引。如果为空，没有可能的索引。可以为相关的域从WHERE语句中选择一个合适的语句&lt;/p&gt;

&lt;p&gt;&lt;code&gt;key&lt;/code&gt;： 实际使用的索引。如果为NULL，则没有使用索引。很少的情况下，MYSQL会选择优化不足的索引。这种情况下，可以在SELECT语句中使用USE INDEX（indexname）来强制使用一个索引或者用IGNORE INDEX（indexname）来强制MYSQL忽略索引&lt;/p&gt;

&lt;p&gt;&lt;code&gt;key_len&lt;/code&gt;：使用的索引的长度。在不损失精确性的情况下，长度越短越好&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ref&lt;/code&gt;：显示索引的哪一列被使用了，如果可能的话，是一个常数&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rows&lt;/code&gt;：MYSQL认为必须检查的用来返回请求数据的行数&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Extra&lt;/code&gt;：关于MYSQL如何解析查询的额外信息&lt;/p&gt;</description>
                <link>http://zmliu.github.io/2013/11/11/mysql-explain</link>
                <guid>http://zmliu.github.io/2013/11/11/mysql-explain</guid>
                <pubDate>2013-11-11T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>Swf一键导出到Starling中的工具，在Starling使用原生的MovieClip</title>
                <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;有些同学使用过程用遇到了问题。我开了一个QQ群。有问题的同学可以进来问一下群号是168436154&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id='id58'&gt;目录&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;1.&lt;/em&gt;&lt;/strong&gt; StarlingSwf是什么&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;2.&lt;/em&gt;&lt;/strong&gt; 功能与特色&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;3.&lt;/em&gt;&lt;/strong&gt; 下载与安装&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;4.&lt;/em&gt;&lt;/strong&gt; 教程一：资源命名规则&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;5.&lt;/em&gt;&lt;/strong&gt; 教程二：针对设计师&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;6.&lt;/em&gt;&lt;/strong&gt; 教程三：针对程序&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;7.&lt;/em&gt;&lt;/strong&gt; 教程四：MovieClip自动停止播放&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;8.&lt;/em&gt;&lt;/strong&gt; 教程五：获取界面上的元素&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='starlingswf'&gt;StarlingSwf是什么&lt;/h2&gt;

&lt;p&gt;StarlingSwf是一套开源的 Swf数据导出到Starling框架中使用的工具.&lt;/p&gt;

&lt;p&gt;他可以让开发导出Swf数据到Starling中渲染&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='id59'&gt;功能与特色&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;1.&lt;/em&gt;&lt;/strong&gt; 导出Swf数据到Starling中&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;2.&lt;/em&gt;&lt;/strong&gt; 在Starling中还原Swf中原件的层级关系、动画、原件属性&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;3.&lt;/em&gt;&lt;/strong&gt; 支持原件嵌套，动画嵌套&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;4.&lt;/em&gt;&lt;/strong&gt; MovieClip基本还原了传统Flash的MovieClip&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;5.&lt;/em&gt;&lt;/strong&gt; 使用了类似骨骼动画的思想，内存占用低、运行效率高&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;6.&lt;/em&gt;&lt;/strong&gt; 自动合并纹理，并且可以自动单独导出大图&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='id60'&gt;下载与安装&lt;/h2&gt;

&lt;p&gt;&lt;a href='https://github.com/zmLiu/StarlingSWF'&gt;工具源码地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='https://github.com/zmLiu/StarlingFeathers'&gt;依赖库地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://url.cn/U3rH7S'&gt;Mac版下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://url.cn/N7tHHQ'&gt;Windows版下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://url.cn/RfP3mV'&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://url.cn/JCViDo'&gt;Demo中Fla的兼容版本&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='id61'&gt;教程一：原件命名规则&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;既然是Swf那么资源的编辑肯定还是用Flash Pro了，但是资源的命名规则大家需要注意下(&lt;code&gt;是AS链接名称噢&lt;/code&gt;)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;1.&lt;/em&gt;&lt;/strong&gt; img 开始会被识别为starling.display.Image.&lt;strong&gt;(&lt;code&gt;这个必须是原件。不能直接用图片&lt;/code&gt;,导出之后该原件会直接被映射为一张图片)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;2.&lt;/em&gt;&lt;/strong&gt; s9 开头会被识别为feathers.display.Scale9Image.&lt;strong&gt;(制作规则跟传统flash开发一样)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;3.&lt;/em&gt;&lt;/strong&gt; btn 开头会被识别为lzm.starling.display.Button.(&lt;strong&gt;Button中使用的任意显示对象必须是&lt;code&gt;img&lt;/code&gt; &lt;code&gt;s9&lt;/code&gt; &lt;code&gt;btn&lt;/code&gt; &lt;code&gt;mc&lt;/code&gt; &lt;code&gt;spr&lt;/code&gt;中制作的对象&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;4.&lt;/em&gt;&lt;/strong&gt; mc 开头会被识别为lzm.starling.swf.display.SwfMovieClip.(&lt;strong&gt;MoviecClip中使用的任意显示对象必须是&lt;code&gt;img&lt;/code&gt; &lt;code&gt;s9&lt;/code&gt; &lt;code&gt;btn&lt;/code&gt; &lt;code&gt;mc&lt;/code&gt; &lt;code&gt;spr&lt;/code&gt;中制作的对象&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;5.&lt;/em&gt;&lt;/strong&gt; spr 开头会被识别为starling.display.Sprite.(&lt;strong&gt;Sprite中使用的任意显示对象必须是&lt;code&gt;img&lt;/code&gt; &lt;code&gt;s9&lt;/code&gt; &lt;code&gt;btn&lt;/code&gt; &lt;code&gt;mc&lt;/code&gt; &lt;code&gt;spr&lt;/code&gt;中制作的对象&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;6.&lt;/em&gt;&lt;/strong&gt; 文本 文本比较特殊 只要在&lt;code&gt;img&lt;/code&gt; &lt;code&gt;s9&lt;/code&gt; &lt;code&gt;btn&lt;/code&gt; &lt;code&gt;mc&lt;/code&gt; &lt;code&gt;spr&lt;/code&gt; 中写就可以了&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='id62'&gt;教程二：针对设计师&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;1.&lt;/em&gt;&lt;/strong&gt;作为设计师，你只需要准备好需要展示的图片，在FlashPro中将他们有序的组装起来。并且为需要导出的原件设置链接就可以了搞定一切&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;2.&lt;/em&gt;&lt;/strong&gt;打开库面板，你可以看到此示例的相关资源.&lt;/p&gt;
&lt;img src='/assets/images/starling_swf_tool/image1.png' alt='截图' class='img-rounded' /&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;3.&lt;/em&gt;&lt;/strong&gt;相关资源编辑好之后导出Swf.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;4.&lt;/em&gt;&lt;/strong&gt;打开StarlingSwf导出工具，选择刚刚导出的swf.选择上方的下拉框，预览在Swf内部的原件在Starling中是什么样子.&lt;/p&gt;
&lt;img src='/assets/images/starling_swf_tool/image2.png' alt='截图' class='img-rounded' /&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;5.&lt;/em&gt;&lt;/strong&gt;选择导出倍数，然后导出.资源导出后会出现两个文件夹&lt;/p&gt;
&lt;img src='/assets/images/starling_swf_tool/image3.png' alt='截图' class='img-rounded' /&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;data下面放的Swf数据,images下放的所有导出的图片.将这两个东西给程序就可以了.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id='id63'&gt;教程三：针对程序&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;1.&lt;/em&gt;&lt;/strong&gt;建立一个Actionscript工程。(demo中是手机工程)&lt;/p&gt;
&lt;img src='/assets/images/starling_swf_tool/image4.png' alt='截图' class='img-rounded' /&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;2.&lt;/em&gt;&lt;/strong&gt;倒入资源&lt;/p&gt;
&lt;img src='/assets/images/starling_swf_tool/image5.png' alt='截图' class='img-rounded' /&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;3.&lt;/em&gt;&lt;/strong&gt;倒入依赖库&lt;/p&gt;
&lt;img src='/assets/images/starling_swf_tool/image6.png' alt='截图' class='img-rounded' /&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;4.&lt;/em&gt;&lt;/strong&gt;代码&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;关键代码&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//初始化Swf
Swf.init(Starling.current.nativeStage);

//创建一个Swf
var swf:Swf = new Swf(assets.getByteArray(&amp;quot;layout&amp;quot;),assets);

//根据as连接名称创建 显示对象
swf.createSprite(&amp;quot;spr_1&amp;quot;);
swf.createMovieClip(&amp;quot;mc_test1&amp;quot;);
swf.createImage(&amp;quot;img_test1&amp;quot;);
swf.createButton(&amp;quot;btn_test1&amp;quot;);
swf.createS9Image(&amp;quot;s9_test1&amp;quot;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;demo中的主要代码&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package
{
	import flash.display.StageAlign;
	import flash.display.StageScaleMode;
	
	import lzm.starling.STLStarup;
	
	public class StarlingSwfTestMain extends STLStarup
	{
		public function StarlingSwfTestMain()
		{
			super();
			
			// 支持 autoOrient
			stage.align = StageAlign.TOP_LEFT;
			stage.scaleMode = StageScaleMode.NO_SCALE;
			stage.color = 0x999999;
			stage.frameRate = 60;
			
			initStarling(StarlingSwfTestMainClass);
		}
	}
}

package
{
	import flash.filesystem.File;
	
	import lzm.starling.STLConstant;
	import lzm.starling.STLMainClass;
	import lzm.starling.gestures.DragGestures;
	import lzm.starling.swf.Swf;
	
	import starling.core.Starling;
	import starling.display.Sprite;
	import starling.text.TextField;
	import starling.utils.AssetManager;
	import starling.utils.formatString;
	
	public class StarlingSwfTestMainClass extends STLMainClass
	{
		
		private var textfield:TextField;
		
		public function StarlingSwfTestMainClass()
		{
			super();
			
			Swf.init(Starling.current.nativeStage);
			
			textfield = new TextField(200,100,&amp;quot;loading....&amp;quot;);
			textfield.x = (STLConstant.StageWidth - textfield.width)/2;
			textfield.y = (STLConstant.StageHeight - textfield.height)/2;
			addChild(textfield);
			
			var assets:AssetManager = new AssetManager(STLConstant.scale,STLConstant.useMipMaps);
			var file:File = File.applicationDirectory;
			
			assets.enqueue(file.resolvePath(formatString(&amp;quot;assets/{0}x/&amp;quot;,STLConstant.scale)));
			assets.loadQueue(function(ratio:Number):void{
				textfield.text = &amp;quot;loading....&amp;quot; + int(ratio*100)+&amp;quot;%&amp;quot;;
				if(ratio == 1){
					textfield.removeFromParent(true);
					
					var swf:Swf = new Swf(assets.getByteArray(&amp;quot;layout&amp;quot;),assets);
					
					var sprite:Sprite = swf.createSprite(&amp;quot;spr_1&amp;quot;);
					addChild(sprite);
					
					new DragGestures(sprite);
				}
			});
		}
	}
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;5.&lt;/em&gt;&lt;/strong&gt;运行效果&lt;/p&gt;
&lt;img src='/assets/images/starling_swf_tool/image7.png' alt='截图' class='img-rounded' /&gt;&lt;hr /&gt;
&lt;h2 id='movieclip'&gt;教程四：MovieClip自动停止播放&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;很多时候需要让动画播放完毕之后自动停止在最后一帧，在工具中也可以很简单的实现&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;1.&lt;/em&gt;&lt;/strong&gt; 倒入swf&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;2.&lt;/em&gt;&lt;/strong&gt; 从MovieClip列表中 选中需要自动停止的MC&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;3.&lt;/em&gt;&lt;/strong&gt; 取消&lt;code&gt;是否循环&lt;/code&gt;&lt;/p&gt;
&lt;img src='/assets/images/starling_swf_tool/image9.png' alt='截图' class='img-rounded' /&gt;&lt;hr /&gt;
&lt;h2 id='id64'&gt;教程五：获取界面上的元素&lt;/h2&gt;

&lt;p&gt;很简单，首先给元素命名&lt;/p&gt;
&lt;img src='/assets/images/starling_swf_tool/image8.png' alt='截图' class='img-rounded' /&gt;
&lt;p&gt;然后使用&lt;code&gt;getChildByName&lt;/code&gt;获取&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;友情提示：工具的预览区域是可以拖动的噢&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</description>
                <link>http://zmliu.github.io/2013/11/09/StarlingSwfTool</link>
                <guid>http://zmliu.github.io/2013/11/09/StarlingSwfTool</guid>
                <pubDate>2013-11-09T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>如何让设备不休眠</title>
                <description>&lt;pre&gt;&lt;code&gt;NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id='id57'&gt;&lt;code&gt;Android&lt;/code&gt;需要配置&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.WAKE_LOCK&amp;quot; /&amp;gt;
&amp;lt;uses-permission android:name=&amp;quot;android.permission.WRITE_SETTINGS&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;</description>
                <link>http://zmliu.github.io/2013/09/17/%E5%A6%82%E4%BD%95%E4%BD%BF%E8%AE%BE%E5%A4%87%E4%B8%8D%E4%BC%91%E7%9C%A0</link>
                <guid>http://zmliu.github.io/2013/09/17/如何使设备不休眠</guid>
                <pubDate>2013-09-17T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>NativeProcess</title>
                <description>&lt;p&gt;NativeProcess 类提供命令行集成和常规启动功能。NativeProcess 类允许 AIR 应用程序在主机操作系统上执行本机进程。AIR 应用程序可以监视进程的标准输入 (stdin) 和标准输出 (stdout) 流以及进程的标准错误 (stderr) 流。&lt;/p&gt;

&lt;h4 id='adobeatf'&gt;直接上代码(这里用adobe的ATF导出工具作为例子)&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var workingDirectory:File = File.applicationDirectory;//根据需求自己改
var executable:File = File.applicationDirectory.resolvePath(&amp;quot;png2atf&amp;quot;);//根据需求自己改
var params:Vector.&amp;lt;String&amp;gt; = new Vector.&amp;lt;String&amp;gt;();
params.push(&amp;quot;-c&amp;quot;);
params.push(&amp;quot;-i&amp;quot;);
params.push(&amp;quot;test.png&amp;quot;);
params.push(&amp;quot;-o&amp;quot;);
params.push(&amp;quot;test.atf&amp;quot;);

var info:NativeProcessStartupInfo = new NativeProcessStartupInfo();
info.workingDirectory = workingDirectory;
info.arguments = params;
info.executable = executable;

var nativeProcess:NativeProcess = new NativeProcess();
nativeProcess.addEventListener(NativeProcessExitEvent.EXIT,onExit);
nativeProcess.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA,onData);
nativeProcess.addEventListener(ProgressEvent.STANDARD_ERROR_DATA,onError);
nativeProcess.start(info);

function onExit(e:NativeProcessExitEvent):void{
	trace(&amp;quot;exit&amp;quot;);
}

function onData(e:ProgressEvent):void{
	trace(nativeProcess.standardOutput.readUTFBytes(nativeProcess.standardOutput.bytesAvailable));
}

function onError(e:ProgressEvent):void{
	trace(nativeProcess.standardError.readUTFBytes(nativeProcess.standardError.bytesAvailable));
}&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id='id54'&gt;注意事项&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;该类只能在AIR中使用 player中无法使用
应用程序配置文件需要配置
&amp;lt;application xmlns=&amp;quot;http://ns.adobe.com/air/application/3.8&amp;quot;&amp;gt;
    ...其他配置...
    &amp;lt;supportedProfiles&amp;gt;extendedDesktop&amp;lt;/supportedProfiles&amp;gt;
&amp;lt;/application&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id='id55'&gt;导出注意事项&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;只能导出为
本机安装程序
或
具有运行时绑定的应用程序
否则NativeProcess将会报错
错误信息为	Error: Error #3219: The NativeProcess could not be started. &amp;#39;Not supported in current profile.&amp;#39;&lt;/code&gt;&lt;/pre&gt;</description>
                <link>http://zmliu.github.io/2013/08/31/NativeProcess</link>
                <guid>http://zmliu.github.io/2013/08/31/NativeProcess</guid>
                <pubDate>2013-08-31T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>ATF批量导出工具</title>
                <description>&lt;p&gt;批量导出Atf的工具，使用是adobe atf 编码核心&lt;/p&gt;

&lt;h4 id='atfbug'&gt;先说一下关于atf的bug&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;当atf导出时候 启用了mips选项 会导致：
如果纹理问长方形时 上传会报错的bug
解决方法是把纹理改成正方形&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id='id51'&gt;来张截图&lt;/h4&gt;
&lt;img src='/assets/images/atftool_view.jpg' alt='截图' class='img-rounded' /&gt;
&lt;h4 id='id52'&gt;功能说明&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;输出平台选择
压缩体积，减小文件大小
mipmap设置
支持jpg png 转换
图像尺寸自动纠正为2幂
图像自动转换为方形,解决atf上传时 为长方形会报错的bug 仅在使用mips会触发 所以需要启用mips可以考虑勾选这个选项
目录转换（包含子目录）
输出质量设置&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id='windows'&gt;&lt;a href='http://url.cn/W5uNfs'&gt;Windows程序下载&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id='macos'&gt;&lt;a href='http://url.cn/WP2K25'&gt;MacOS程序下载&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id='id53'&gt;&lt;a href='https://github.com/zmLiu/ATFTool'&gt;源码&lt;/a&gt;&lt;/h4&gt;</description>
                <link>http://zmliu.github.io/2013/08/31/ATFTool</link>
                <guid>http://zmliu.github.io/2013/08/31/ATFTool</guid>
                <pubDate>2013-08-31T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>ATF (Adobe Texture Format)</title>
                <description>&lt;h2 id='gpu'&gt;各个平台的GPU处理格式&lt;/h2&gt;
&lt;table class='table table-hover table-bordered'&gt;
	&lt;thead&gt;
		&lt;tr&gt;
			&lt;th&gt;平台&lt;/th&gt;&lt;th&gt;格式&lt;/th&gt;
		&lt;/tr&gt;
	&lt;/thead&gt;
	&lt;tbody&gt;
		&lt;tr&gt;
			&lt;td&gt;ImgTech (IOS)&lt;/td&gt;&lt;td&gt;PVRTC&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;Qualcom (Android)&lt;/td&gt;&lt;td&gt;ETC1&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;Mali (Android)&lt;/td&gt;&lt;td&gt;ETC1&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;NVidia (Android)&lt;/td&gt;&lt;td&gt;ETC1/DXT1/DXT5&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;Android (PowerVR)&lt;/td&gt;&lt;td&gt;PVRT/ETC1&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;Windows&lt;/td&gt;&lt;td&gt;DXT1/DXT5&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;MacOS&lt;/td&gt;&lt;td&gt;DXT1/DXT5&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id='id46'&gt;如何使用工具&lt;/h2&gt;

&lt;p&gt;把工具和原格式图片文件放置在同一文件夹下，例子中使用C盘根目录，DOS使用工具指令如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//package leaf.png with all 3 formats (DXT5, PVRTC and ETC1x2)
C:\png2atf.exe -c -i leaf.png -o leaf.atf
[In 213KB][Out 213KB][Ratio 99.9703%][LZMA:0KB JPEG-XR:213KB]

//package specific range of mipmaps
C:\png2atf.exe -c -n 0,5 -i leaf.png -o leaf0,5.atf
[In 213KB][Out 213KB][Ratio 99.8825%][LZMA:0KB JPEG-XR:213KB]

//package only DXT format
C:\png2atf.exe -c d -i leaf.png -o leaf_dxt5.atf
[In 85KB][Out 85KB][Ratio 100.045%][LZMA:0KB JPEG-XR:85KB]

//package only ETC1 format
C:\png2atf.exe -c e -i leaf.png -o leaf_etc1.atf
[In 85KB][Out 85KB][Ratio 100.045%][LZMA:0KB JPEG-XR:85KB]

//package only PVRTC format
C:\png2atf.exe -c p -i leaf.png -o leaf_pvrtc.atf
[In 42KB][Out 42KB][Ratio 100.089%][LZMA:0KB JPEG-XR:42KB]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你想在你的ATF存储未压缩的纹理，只要不使用-c参数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//package as uncompressed (RGBA) format
C:\png2atf.exe  -i  leaf.png  -o  leaf_rgba.atf
[In 341KB][Out 43KB][Ratio 12.8596%][LZMA:0KB JPEG-XR:43KB]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还有一个很酷的功能是，流式纹理的ATF也可以使用，你可以这样做以生成3个文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;png2atf -m -n 0,0 -c -i cubecat0.png -o cubecat_c_high.atf
png2atf -m -n 1,2 -c -i cubecat0.png -o cubecat_c_med.atf
png2atf -m -n 3,20 -c -i cubecat0.png -o cubecat_c_low.atf&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id47'&gt;在&lt;code&gt;Stage3D&lt;/code&gt;中使用压缩纹理&lt;/h2&gt;

&lt;p&gt;你需要使用Texture.uploadCompressedTextureFromByteArray 这个方法来上传压缩纹理，这个API可以设定该压缩纹理是否使用透明通：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Example 
{
 [Embed( source = &amp;quot;mytexture.atf&amp;quot;, mimeType=&amp;quot;application/octet-stream&amp;quot;)]
 public static const TextureAsset:Class;
 public var context3D:Context3D;
 public function init():void
 {
  var texture:Texture = context3D.createTexture(256, 256, 
     Context3DTextureFormat.COMPRESSED_ALPHA, false);
  var textureAsset:ByteArray = new TextureAsset() as ByteArray;
  texture.uploadCompressedTextureFromByteArray(textureAsset, 0);
 }
};&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;立方体纹理你可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var texCubemap:CubeTexture = context3D.createCubeTexture(256, Context3DTextureFormat.COMPRESSED_ALPHA, false);
var textureAsset:ByteArray = new TextureAsset() as ByteArray;
texCubemap.uploadCompressedTextureFromByteArray(textureAsset, 0);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另外，根据是否使用透明通道，必须在的片段着色器里使用下面的设置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1、普通的纹理 Context3DTextureFormat.BGRA
2、“DXT1”（没有透明通道的压缩纹理）Context3DTextureFormat.COMPRESSED
3、“DXT5”（拥有透明通道的压缩纹理）Context3DTextureFormat.COMPRESSED_ALPHA&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id48'&gt;在&lt;code&gt;Starling&lt;/code&gt;中的用法&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;[Embed(source=&amp;quot;starling.atf&amp;quot;, mimeType=&amp;quot;application/octet-stream&amp;quot;)]
public static const CompressedData:Class;

var data:ByteArray = new CompressedData();
var texture:Texture = Texture.fromAtfData(data);
var image:Image = new Image(texture);
addChild(image);&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id49'&gt;使用要求&lt;/h2&gt;

&lt;p&gt;如果你使用ATF纹理，那么你需要注意下面几点：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1、如果您使用是`starling`，你至少需要`1.2`版本。在`[Github](https://github.com/PrimaryFeather/Starling-Framework)`上获取，或者官方下载最新版本。
2、如果你是自己封装`Stage3D`，那么你需要使用最新的`AGALMiniAssembler`
3、你至少需要`AIR SDK 3.4` ，或者下载`Flash Builder 4.7AIR 3.4 SDK`。
4、需要Flash播放器`11.4/AIR 3.4`
5、您需要添加编译器参数`“-swf-version=17”`&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id50'&gt;命令说明:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;-i	指定需要转换的文件名
-o	指定输出的文件名
-c	是否压缩。如果不压缩不要填写该参数即可
-q &amp;lt;0-180&amp;gt;	压缩质量越低质量越高
-r	是否使用JPEG-XR+LZMA压缩以减少文件大小 
-n &amp;lt;start,end&amp;gt;	生成mip的等级

例子 png2atf -c -r -q 0 -n 0,1 -i ui.png -o ui.atf&lt;/code&gt;&lt;/pre&gt;</description>
                <link>http://zmliu.github.io/2013/08/30/ATF</link>
                <guid>http://zmliu.github.io/2013/08/30/ATF</guid>
                <pubDate>2013-08-30T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>SFS2X 破解</title>
                <description>&lt;h4 id='id43'&gt;把&lt;code&gt;sfs2x/lib&lt;/code&gt;下的所有&lt;code&gt;jar&lt;/code&gt;库放在构建路径中&lt;/h4&gt;

&lt;h4 id='id44'&gt;代码如下&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;import java.io.FileOutputStream;

import com.smartfoxserver.v2.entities.data.SFSObject;
import com.smartfoxserver.v2.protocol.binary.DefaultPacketCompressor;

public class main {

        public static void main(String[] args) throws Exception {
                SFSObject license = new SFSObject();
                license.putUtfString(&amp;quot;customer&amp;quot;, &amp;quot;&amp;quot;);// 授权人，为空则为共享版，否则个人版
                license.putUtfString(&amp;quot;bind&amp;quot;, &amp;quot;127.0.0.1&amp;quot;);// 限制IP
                license.putInt(&amp;quot;users&amp;quot;, -1);// 连接数上限，-1为无限数量
                license.putLong(&amp;quot;expire&amp;quot;, 0);// 版权到期时间，0为无限制
                license.putBool(&amp;quot;private&amp;quot;, false);// 私有？

                byte[] objectBytes = license.toBinary();
                objectBytes = new DefaultPacketCompressor().compress(objectBytes);
                byte[] licenseData = new byte[objectBytes.length + 4];
                for (int i = 0; i &amp;lt; objectBytes.length; i++) {
                        licenseData[i + 4] = (byte) (objectBytes[i] ^ licenseData[2]);
                }

                new FileOutputStream(&amp;quot;license.2x&amp;quot;).write((byte[]) licenseData);
        }
}&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id='id45'&gt;最后将生成的&lt;code&gt;license.2x&lt;/code&gt;文件放在&lt;code&gt;SFS2X/config/&lt;/code&gt;下即可&lt;/h4&gt;</description>
                <link>http://zmliu.github.io/2013/08/29/sfs2x%E7%A0%B4%E8%A7%A3</link>
                <guid>http://zmliu.github.io/2013/08/29/sfs2x破解</guid>
                <pubDate>2013-08-29T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>最小化时关闭程序</title>
                <description>&lt;pre&gt;&lt;code&gt;如果想在最小化的时候关闭，安卓里可以用NativeApplication.application.exit()
这个方法在iOS里不起作用，iOS里需要在XML里写
&amp;lt;key&amp;gt;
	UIApplicationExitsOnSuspend
&amp;lt;/key&amp;gt;
&amp;lt;true/&amp;gt;&lt;/code&gt;&lt;/pre&gt;</description>
                <link>http://zmliu.github.io/2013/08/28/%E6%9C%80%E5%B0%8F%E5%8C%96%E6%97%B6%E5%85%B3%E9%97%AD%E7%A8%8B%E5%BA%8F</link>
                <guid>http://zmliu.github.io/2013/08/28/最小化时关闭程序</guid>
                <pubDate>2013-08-28T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>StageWebView 用法</title>
                <description>&lt;h4 id='_airplayer'&gt;&lt;code&gt;StageWebView&lt;/code&gt; 只能再Air中使用。Player中不能使用&lt;/h4&gt;

&lt;h4 id='id39'&gt;代码&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var stagewebview:StageWebView = new StageWebView();
stagewebview.loadURL(&amp;quot;http://www.baidu.com&amp;quot;);
stagewebview.viewPort = new Rectangle(0,0,stage.fullScreenWidth,stage.fullScreenHeight);
stagewebview.stage = stage;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id='xml'&gt;xml配置&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;renderMode&amp;gt;cpu&amp;lt;/renderMode&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id='id40'&gt;参考连接&lt;/h4&gt;

&lt;h4 id='httphelpadobecomzh_cnas3devws901d38e593cd1bac3ef1d28412ac57b094b8000html'&gt;&lt;a href='http://help.adobe.com/zh_CN/as3/dev/WS901d38e593cd1bac3ef1d28412ac57b094b-8000.html'&gt;http://help.adobe.com/zh_CN/as3/dev/WS901d38e593cd1bac3ef1d28412ac57b094b-8000.html&lt;/a&gt;&lt;/h4&gt;</description>
                <link>http://zmliu.github.io/2013/08/28/actionscript3</link>
                <guid>http://zmliu.github.io/2013/08/28/actionscript3</guid>
                <pubDate>2013-08-28T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>iphone5 Stage 尺寸问题</title>
                <description>&lt;h4 id='adobeair_'&gt;今天用AdobeAir 实现的程序上&lt;code&gt;iTouch5&lt;/code&gt;测试发现尺寸怎么获取出来都是&lt;code&gt;960*640&lt;/code&gt;&lt;/h4&gt;

&lt;h4 id='_'&gt;然后细细回味了一下之前的程序 貌似没有遇到这个问题。&lt;/h4&gt;

&lt;h4 id='_ok'&gt;仔细对比了一下工程和之前工程的差别。发现唯一就是没有&lt;code&gt;icon图&lt;/code&gt;和&lt;code&gt;启动图像&lt;/code&gt;。果断添加了&lt;code&gt;Default-568h@2x.png启动图像&lt;/code&gt; 再次测试OK了&lt;/h4&gt;</description>
                <link>http://zmliu.github.io/2013/08/22/actionscript3</link>
                <guid>http://zmliu.github.io/2013/08/22/actionscript3</guid>
                <pubDate>2013-08-22T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>nginx 413 Request Entity Too Large</title>
                <description>&lt;pre&gt;&lt;code&gt;该错误是由于 nginx.conf 中 client_max_body_size 的相关设置值太小的原因导致，调整到相应的值即可.
如果运行的是php需要需要注意php.ini的中post_max_size和upload_max_filesize的值.
client_max_body_size需要比post_max_size和upload_max_filesize中的最大值 一致或者稍大&lt;/code&gt;&lt;/pre&gt;</description>
                <link>http://zmliu.github.io/2013/08/20/nginx413</link>
                <guid>http://zmliu.github.io/2013/08/20/nginx413</guid>
                <pubDate>2013-08-20T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>wdlinux lanmp一键包安装使用心得</title>
                <description>&lt;h5 id='wdlinux'&gt;官网:&lt;a href='http://www.wdlinux.cn'&gt;wdlinux&lt;/a&gt;&lt;/h5&gt;

&lt;h5 id='lanmp__'&gt;一键包地址:&lt;a href='http://www.wdlinux.cn/lanmp/'&gt;lanmp&lt;/a&gt; 官网的最新版不是很稳定 所以还是使用这个&lt;/h5&gt;

&lt;h3 id='id37'&gt;安装&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;如果没有GCC或编译环境,先执行
yum install -y gcc gcc-c++ make autoconf libtool-ltdl-devel gd-devel freetype-devel libxml2-devel libjpeg-devel libpng-devel openssl-devel curl-devel patch libmcrypt-devel libmhash-devel ncurses-devel sudo bzip2 

wget http://dl.wdlinux.cn:5180/lanmp_laster.tar.gz
tar zxvf lanmp_laster.tar.gz
sh in.sh&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='php'&gt;PHP扩展&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;php.ini extension_dir = &amp;quot;./&amp;quot;为#extension_dir = &amp;quot;./&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='wdcp_mysql___innodb'&gt;wdcp mysql 优化方案 - innodb&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;需要先安装 mysql innodb
安装方法
wget -c http://down.wdlinux.cn/in/mysql_innodb_ins.sh
chmod 755 mysql_innodb_ins.sh 
./mysql_innodb_ins.sh&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='_'&gt;相关服务的操作 命令&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;service wdapache start|stop|restart  wdcp后台
service nginxd start|stop|restart       nginx服务
service httpd start|stop|restart         httpd服务
service pureftpd start|stop|restart    ftp服务
service mysqld start|stop|restart       mysql服务&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='ftp'&gt;ftp&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;如果ftp要访问/www/web以外的其他目录
需要使用
chown -R www 目录名
给予wwww用户xxx目录的操作权限
但是千万不要使用chown -R www / 会把服务器环境搞崩溃
例如需要/home的操作权限 执行命令 chown -R www /home&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id='lnampwdcp'&gt;关于一键安装包，目录，启动，lnamp,wdcp所用端口的说明&lt;/h5&gt;

&lt;h5 id='httpwwwwdlinuxcnbbsthread19211html'&gt;&lt;a href='http://www.wdlinux.cn/bbs/thread-192-1-1.html'&gt;http://www.wdlinux.cn/bbs/thread-192-1-1.html&lt;/a&gt;&lt;/h5&gt;

&lt;h5 id='mysql'&gt;mysql数据迁移&lt;/h5&gt;

&lt;h5 id='httpwwwwdlinuxcnbbsthread152111html'&gt;&lt;a href='http://www.wdlinux.cn/bbs/thread-1521-1-1.html'&gt;http://www.wdlinux.cn/bbs/thread-1521-1-1.html&lt;/a&gt;&lt;/h5&gt;

&lt;h5 id='id38'&gt;常见问题&lt;/h5&gt;

&lt;h5 id='httpwwwwdlinuxcnbbsthread145011html'&gt;&lt;a href='http://www.wdlinux.cn/bbs/thread-1450-1-1.html'&gt;http://www.wdlinux.cn/bbs/thread-1450-1-1.html&lt;/a&gt;&lt;/h5&gt;

&lt;h5 id='php'&gt;PHP升级脚本&lt;/h5&gt;

&lt;h5 id='53httpwwwwdlinuxcnbbsthread373711html'&gt;5.3&lt;a href='http://www.wdlinux.cn/bbs/thread-3737-1-1.html'&gt;http://www.wdlinux.cn/bbs/thread-3737-1-1.html&lt;/a&gt;&lt;/h5&gt;

&lt;h5 id='54httpwwwwdlinuxcnbbsthread477112html'&gt;5.4&lt;a href='http://www.wdlinux.cn/bbs/thread-4771-1-2.html'&gt;http://www.wdlinux.cn/bbs/thread-4771-1-2.html&lt;/a&gt;&lt;/h5&gt;</description>
                <link>http://zmliu.github.io/2013/08/14/wdlinux-lanmp</link>
                <guid>http://zmliu.github.io/2013/08/14/wdlinux-lanmp</guid>
                <pubDate>2013-08-14T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>MySQL配置文件my.cnf详解</title>
                <description>&lt;p&gt;此mysql配置文件例子针对4G内存&lt;/p&gt;

&lt;h2 id='id1'&gt;&lt;code&gt;port = 3306&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;mysql使用的端口&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id2'&gt;&lt;code&gt;socket = /tmp/mysqls.sock&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;socket连接文件&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id3'&gt;&lt;code&gt;back_log = 50&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;back_log 是操作系统在监听队列中所能保持的连接数,
队列保存了在MySQL连接管理器线程处理之前的连接.
如果你有非常高的连接率并且出现&amp;quot;connection refused&amp;quot; 报错,
你就应该增加此处的值.
检查你的操作系统文档来获取这个变量的最大值.
如果将back_log设定到比你操作系统限制更高的值,将会没有效果&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id4'&gt;&lt;code&gt;#skip-networking&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;不在TCP/IP端口上进行监听.
如果所有的进程都是在同一台服务器连接到本地的mysqld,
这样设置将是增强安全的方法
所有mysqld的连接都是通过Unix sockets 或者命名管道进行的.
注意在windows下如果没有打开命名管道选项而只是用此项
(通过 &amp;quot;enable-named-pipe&amp;quot; 选项) 将会导致mysql服务没有任何作用!&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id5'&gt;&lt;code&gt;max_connect_errors = 10&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;MySQL 服务所允许的同时会话数的上限
其中一个连接将被SUPER权限保留作为管理员登录.
即便已经达到了连接数的上限.
max_connections = 100
每个客户端连接最大的错误允许数量,如果达到了此限制.
这个客户端将会被MySQL服务阻止直到执行了&amp;quot;FLUSH HOSTS&amp;quot; 或者服务重启
非法的密码以及其他在链接时的错误会增加此值.
查看 &amp;quot;Aborted_connects&amp;quot; 状态来获取全局计数器.&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id6'&gt;&lt;code&gt;table_cache = 2048&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;所有线程所打开表的数量.
增加此值就增加了mysqld所需要的文件描述符的数量
这样你需要确认在[mysqld_safe]中 &amp;quot;open-files-limit&amp;quot; 变量设置打开文件数量允许至少4096&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id7'&gt;&lt;code&gt;#external-locking&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;允许外部文件级别的锁. 打开文件锁会对性能造成负面影响
所以只有在你在同样的文件上运行多个数据库实例时才使用此选项(注意仍会有其他约束!)
或者你在文件层面上使用了其他一些软件依赖来锁定MyISAM表&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id8'&gt;&lt;code&gt;max_allowed_packet = 16M&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;服务所能处理的请求包的最大大小以及服务所能处理的最大的请求大小(当与大的BLOB字段一起工作时相当必要)
每个连接独立的大小.大小动态增加&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id9'&gt;&lt;code&gt;binlog_cache_size = 1M&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;在一个事务中binlog为了记录SQL状态所持有的cache大小
如果你经常使用大的,多声明的事务,你可以增加此值来获取更大的性能.
所有从事务来的状态都将被缓冲在binlog缓冲中然后在提交后一次性写入到binlog中
如果事务比此值大, 会使用磁盘上的临时文件来替代.
此缓冲在每个连接的事务第一次更新状态时被创建&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id10'&gt;&lt;code&gt;max_heap_table_size = 64M&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;独立的内存表所允许的最大容量.
此选项为了防止意外创建一个超大的内存表导致永尽所有的内存资源.&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id11'&gt;&lt;code&gt;sort_buffer_size = 8M&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;排序缓冲被用来处理类似ORDER BY以及GROUP BY队列所引起的排序
如果排序后的数据无法放入排序缓冲,
一个用来替代的基于磁盘的合并分类会被使用
查看 &amp;quot;Sort_merge_passes&amp;quot; 状态变量.
在排序发生时由每个线程分配&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id12'&gt;&lt;code&gt;join_buffer_size = 8M&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;此缓冲被使用来优化全联合(full JOINs 不带索引的联合).
类似的联合在极大多数情况下有非常糟糕的性能表现,
但是将此值设大能够减轻性能影响.
通过 &amp;quot;Select_full_join&amp;quot; 状态变量查看全联合的数量
当全联合发生时,在每个线程中分配&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id13'&gt;&lt;code&gt;thread_cache_size = 8&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;我们在cache中保留多少线程用于重用
当一个客户端断开连接后,如果cache中的线程还少于thread_cache_size,
则客户端线程被放入cache中.
这可以在你需要大量新连接的时候极大的减少线程创建的开销
(一般来说如果你有好的线程模型的话,这不会有明显的性能提升.)&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id14'&gt;&lt;code&gt;thread_concurrency = 8&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;此允许应用程序给予线程系统一个提示在同一时间给予渴望被运行的线程的数量.
此值只对于支持 thread_concurrency() 函数的系统有意义( 例如Sun Solaris).
你可可以尝试使用 [CPU数量]*(2..4) 来作为thread_concurrency的值&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id15'&gt;&lt;code&gt;query_cache_size = 64M&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;查询缓冲常被用来缓冲 SELECT 的结果并且在下一次同样查询的时候不再执行直接返回结果.
打开查询缓冲可以极大的提高服务器速度, 如果你有大量的相同的查询并且很少修改表.
查看 &amp;quot;Qcache_lowmem_prunes&amp;quot; 状态变量来检查是否当前值对于你的负载来说是否足够高.
注意: 在你表经常变化的情况下或者如果你的查询原文每次都不同,
查询缓冲也许引起性能下降而不是性能提升.&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id16'&gt;&lt;code&gt;query_cache_limit = 2M&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;只有小于此设定值的结果才会被缓冲
此设置用来保护查询缓冲,防止一个极大的结果集将其他所有的查询结果都覆盖.&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id17'&gt;&lt;code&gt;ft_min_word_len = 4&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;被全文检索索引的最小的字长.
你也许希望减少它,如果你需要搜索更短字的时候.
注意在你修改此值之后,
你需要重建你的 FULLTEXT 索引&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id18'&gt;&lt;code&gt;#memlock&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;如果你的系统支持 memlock() 函数,你也许希望打开此选项用以让运行中的mysql在在内存高度紧张的时候,数据在内存中保持锁定并且防止可能被swapping out
此选项对于性能有益&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id19'&gt;&lt;code&gt;default_table_type = MYISAM&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;当创建新表时作为默认使用的表类型,
如果在创建表示没有特别执行表类型,将会使用此值&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id20'&gt;&lt;code&gt;thread_stack = 192K&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;线程使用的堆大小. 此容量的内存在每次连接时被预留.
MySQL 本身常不会需要超过64K的内存
如果你使用你自己的需要大量堆的UDF函数
或者你的操作系统对于某些操作需要更多的堆,
你也许需要将其设置的更高一点.&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id21'&gt;&lt;code&gt;transaction_isolation = REPEATABLE-READ&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;设定默认的事务隔离级别.可用的级别如下:
READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id22'&gt;&lt;code&gt;tmp_table_size = 64M&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;内部(内存中)临时表的最大大小
如果一个表增长到比此值更大,将会自动转换为基于磁盘的表.
此限制是针对单个表的,而不是总和.&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id23'&gt;&lt;code&gt;log-bin=mysql-bin&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;打开二进制日志功能.
在复制(replication)配置中,作为MASTER主服务器必须打开此项
如果你需要从你最后的备份中做基于时间点的恢复,你也同样需要二进制日志.&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id24'&gt;&lt;code&gt;#log_slave_updates&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;如果你在使用链式从服务器结构的复制模式 (A-&amp;gt;B-&amp;gt;C),
你需要在服务器B上打开此项.
此选项打开在从线程上重做过的更新的日志,
并将其写入从服务器的二进制日志.&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id25'&gt;&lt;code&gt;#log&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;打开全查询日志. 所有的由服务器接收到的查询 (甚至对于一个错误语法的查询)
都会被记录下来. 这对于调试非常有用, 在生产环境中常常关闭此项.&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id26'&gt;&lt;code&gt;#log_warnings&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;将警告打印输出到错误log文件.  如果你对于MySQL有任何问题
你应该打开警告log并且仔细审查错误日志,查出可能的原因.&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id27'&gt;&lt;code&gt;log_slow_queries&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;记录慢速查询. 慢速查询是指消耗了比 &amp;quot;long_query_time&amp;quot; 定义的更多时间的查询.
如果 log_long_format 被打开,那些没有使用索引的查询也会被记录.
如果你经常增加新查询到已有的系统内的话. 一般来说这是一个好主意,&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id28'&gt;&lt;code&gt;long_query_time = 2&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;所有的使用了比这个时间(以秒为单位)更多的查询会被认为是慢速查询.
不要在这里使用&amp;quot;1&amp;quot;, 否则会导致所有的查询,甚至非常快的查询页被记录下来(由于MySQL 目前时间的精确度只能达到秒的级别).&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id29'&gt;&lt;code&gt;log_long_format&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;在慢速日志中记录更多的信息.
一般此项最好打开.
打开此项会记录使得那些没有使用索引的查询也被作为到慢速查询附加到慢速日志里&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id30'&gt;&lt;code&gt;#tmpdir = /tmp&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;此目录被MySQL用来保存临时文件.例如,
它被用来处理基于磁盘的大型排序,和内部排序一样.
以及简单的临时表.
如果你不创建非常大的临时文件,将其放置到 swapfs/tmpfs 文件系统上也许比较好
另一种选择是你也可以将其放置在独立的磁盘上.
你可以使用&amp;quot;;&amp;quot;来放置多个路径
他们会按照roud-robin方法被轮询使用.&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id31'&gt;&lt;code&gt;server-id = 1&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;唯一的服务辨识号,数值位于 1 到 2^32-1之间.
此值在master和slave上都需要设置.
如果 &amp;quot;master-host&amp;quot; 没有被设置,则默认为1, 但是如果忽略此选项,MySQL不会作为master生效.&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id32'&gt;&lt;code&gt;Slave&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;复制的Slave (去掉master段的注释来使其生效)
#
为了配置此主机作为复制的slave服务器,你可以选择两种方法:
#
1) 使用 CHANGE MASTER TO 命令 (在我们的手册中有完整描述) -
   语法如下:

   CHANGE MASTER TO MASTER_HOST=&amp;lt;host&amp;gt;, MASTER_PORT=&amp;lt;port&amp;gt;,
   MASTER_USER=&amp;lt;user&amp;gt;, MASTER_PASSWORD=&amp;lt;password&amp;gt; ;

   你需要替换掉 &amp;lt;host&amp;gt;, &amp;lt;user&amp;gt;, &amp;lt;password&amp;gt; 等被尖括号包围的字段以及使用master的端口号替换&amp;lt;port&amp;gt; (默认3306).

   例子:

   CHANGE MASTER TO MASTER_HOST=&amp;#39;125.564.12.1&amp;#39;, MASTER_PORT=3306,
   MASTER_USER=&amp;#39;joe&amp;#39;, MASTER_PASSWORD=&amp;#39;secret&amp;#39;;

或者
#
2) 设置以下的变量. 不论如何, 在你选择这种方法的情况下, 然后第一次启动复制(甚至不成功的情况下,
   例如如果你输入错密码在master-password字段并且slave无法连接),
   slave会创建一个 master.info 文件,并且之后任何对于包含在此文件内的参数的变化都会被忽略
   并且由 master.info 文件内的内容覆盖, 除非你关闭slave服务, 删除 master.info 并且重启slave 服务.
   由于这个原因,你也许不想碰一下的配置(注释掉的) 并且使用 CHANGE MASTER TO (查看上面) 来代替

所需要的唯一id号位于 2 和 2^32 - 1之间
(并且和master不同)
如果master-host被设置了.则默认值是2
但是如果省略,则不会生效
#server-id = 2

复制结构中的master - 必须
#master-host = &amp;lt;hostname&amp;gt;

当连接到master上时slave所用来认证的用户名 - 必须
#master-user = &amp;lt;username&amp;gt;

当连接到master上时slave所用来认证的密码 - 必须
#master-password = &amp;lt;password&amp;gt;

master监听的端口.
可选 - 默认是3306
#master-port = &amp;lt;port&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id33'&gt;&lt;code&gt;#read_only&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;使得slave只读.只有用户拥有SUPER权限和在上面的slave线程能够修改数据.
你可以使用此项去保证没有应用程序会意外的修改slave而不是master上的数据&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id34'&gt;&lt;code&gt;quick&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;[mysqldump]
不要在将内存中的整个结果写入磁盘之前缓存. 在导出非常巨大的表时需要此项


max_allowed_packet = 16M

[mysql]
no-auto-rehash&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='id35'&gt;&lt;code&gt;#safe-updates&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;仅仅允许使用键值的 UPDATEs 和 DELETEs .&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code&gt;[isamchk]
key_buffer = 512M
sort_buffer_size = 512M
read_buffer = 8M
write_buffer = 8M

[myisamchk]
key_buffer = 512M
sort_buffer_size = 512M
read_buffer = 8M
write_buffer = 8M

[mysqlhotcopy]
interactive-timeout&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id='id36'&gt;&lt;code&gt;open-files-limit = 8192&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;[mysqld_safe]
增加每个进程的可打开文件数量.
警告: 确认你已经将全系统限制设定的足够高!
打开大量表需要将此值设b&lt;/code&gt;&lt;/pre&gt;</description>
                <link>http://zmliu.github.io/2013/08/09/mysql-my_cnf</link>
                <guid>http://zmliu.github.io/2013/08/09/mysql-my_cnf</guid>
                <pubDate>2013-08-09T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>Hello World2</title>
                <description>&lt;code class=&quot;java&quot;&gt;再次测试&lt;/code&gt;
</description>
                <link>http://zmliu.github.io/test/2013/08/02/hello-world2</link>
                <guid>http://zmliu.github.io/test/2013/08/02/hello-world2</guid>
                <pubDate>2013-08-02T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>Hello Blog</title>
                <description>测试一下
</description>
                <link>http://zmliu.github.io/test/2013/08/02/hello-world</link>
                <guid>http://zmliu.github.io/test/2013/08/02/hello-world</guid>
                <pubDate>2013-08-02T00:00:00+08:00</pubDate>
        </item>


</channel>
</rss>
